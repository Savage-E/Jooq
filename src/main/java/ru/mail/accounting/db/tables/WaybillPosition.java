/*
 * This file is generated by jOOQ.
 */
package ru.mail.accounting.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.mail.accounting.db.Keys;
import ru.mail.accounting.db.Public;
import ru.mail.accounting.db.tables.records.WaybillPositionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WaybillPosition extends TableImpl<WaybillPositionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.waybill_position</code>
     */
    public static final WaybillPosition WAYBILL_POSITION = new WaybillPosition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WaybillPositionRecord> getRecordType() {
        return WaybillPositionRecord.class;
    }

    /**
     * The column <code>public.waybill_position.position</code>.
     */
    public final TableField<WaybillPositionRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.waybill_position.price</code>.
     */
    public final TableField<WaybillPositionRecord, Long> PRICE = createField(DSL.name("price"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.waybill_position.nomenclature</code>.
     */
    public final TableField<WaybillPositionRecord, Long> NOMENCLATURE = createField(DSL.name("nomenclature"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.waybill_position.amount</code>.
     */
    public final TableField<WaybillPositionRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.waybill_position.waybill</code>.
     */
    public final TableField<WaybillPositionRecord, Long> WAYBILL = createField(DSL.name("waybill"), SQLDataType.BIGINT.nullable(false), this, "");

    private WaybillPosition(Name alias, Table<WaybillPositionRecord> aliased) {
        this(alias, aliased, null);
    }

    private WaybillPosition(Name alias, Table<WaybillPositionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.waybill_position</code> table reference
     */
    public WaybillPosition(String alias) {
        this(DSL.name(alias), WAYBILL_POSITION);
    }

    /**
     * Create an aliased <code>public.waybill_position</code> table reference
     */
    public WaybillPosition(Name alias) {
        this(alias, WAYBILL_POSITION);
    }

    /**
     * Create a <code>public.waybill_position</code> table reference
     */
    public WaybillPosition() {
        this(DSL.name("waybill_position"), null);
    }

    public <O extends Record> WaybillPosition(Table<O> child, ForeignKey<O, WaybillPositionRecord> key) {
        super(child, key, WAYBILL_POSITION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<WaybillPositionRecord, Integer> getIdentity() {
        return (Identity<WaybillPositionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<WaybillPositionRecord> getPrimaryKey() {
        return Keys.POSITION_PKEY;
    }

    @Override
    public List<UniqueKey<WaybillPositionRecord>> getKeys() {
        return Arrays.<UniqueKey<WaybillPositionRecord>>asList(Keys.POSITION_PKEY);
    }

    @Override
    public List<ForeignKey<WaybillPositionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WaybillPositionRecord, ?>>asList(Keys.WAYBILL_POSITION__NOMENCLATURE_FKEY, Keys.WAYBILL_POSITION__WAYBILL_FKEY);
    }

    public Nomenclature nomenclature() {
        return new Nomenclature(this, Keys.WAYBILL_POSITION__NOMENCLATURE_FKEY);
    }

    public Waybill waybill() {
        return new Waybill(this, Keys.WAYBILL_POSITION__WAYBILL_FKEY);
    }

    @Override
    public WaybillPosition as(String alias) {
        return new WaybillPosition(DSL.name(alias), this);
    }

    @Override
    public WaybillPosition as(Name alias) {
        return new WaybillPosition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WaybillPosition rename(String name) {
        return new WaybillPosition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WaybillPosition rename(Name name) {
        return new WaybillPosition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, Long, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
